#ifndef MONT_H
#define MONT_H

#include <iostream>
#include <iomanip>
#include <tuple>

#define BIG_INTEGER_CHUNKS8(c7, c6, c5, c4, c3, c2, c1, c0) {c0, c1, c2, c3, c4, c5, c6, c7}
#define BIG_INTEGER_CHUNKS16(c15, c14, c13, c12, c11, c10, c9, c8, c7, c6, c5, c4, c3, c2, c1, c0) \
  {c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15}

namespace mont256
{
  typedef u_int32_t u32;
  typedef u_int64_t u64;

  namespace host_arith
  {
    __host__ u32 addc(u32 a, u32 b, u32& carry)
    {
      u64 ret = (u64)a + (u64)b + (u64)carry;
      carry = (u32)(ret >> 32);
      return ret;
    }

    __host__ u32 subb(u32 a, u32 b, u32& borrow)
    {
      u64 ret = (u64)a - (u64)b - (u64)(borrow >> 31);
      borrow = (u32)(ret >> 32);
      return ret;
    }

    __host__ u32 madc(u32 a, u32 b, u32 c, u32& carry)
    {
      u64 ret = (u64)b * (u64)c + (u64)a + (u64)carry;
      carry = (u32)(ret >> 32);
      return ret;
    }
  }

  struct Number;

  struct Number2
  {
    u32 c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

    __host__ __device__ Number2() {}
    __host__ __device__ __forceinline__ Number2(
        u32 c0, u32 c1, u32 c2, u32 c3, u32 c4, u32 c5, u32 c6, u32 c7,
        u32 c8, u32 c9, u32 c10, u32 c11, u32 c12, u32 c13, u32 c14, u32 c15) : c0(c0), c1(c1), c2(c2), c3(c3), c4(c4), c5(c5), c6(c6), c7(c7),
                                                                                c8(c8), c9(c9), c10(c10), c11(c11), c12(c12), c13(c13), c14(c14), c15(c15) {}

    __host__ __device__ __forceinline__ void split(Number &hi, Number &lo) const;

    static __host__ __device__ __forceinline__ Number2 load(const u32 *p, u32 stride = 1)
    {
      Number2 n;
      n.c0 = p[0];
      n.c1 = p[stride];
      n.c2 = p[2 * stride];
      n.c3 = p[3 * stride];
      n.c4 = p[4 * stride];
      n.c5 = p[5 * stride];
      n.c6 = p[6 * stride];
      n.c7 = p[7 * stride];
      n.c8 = p[8 * stride];
      n.c9 = p[9 * stride];
      n.c10 = p[10 * stride];
      n.c11 = p[11 * stride];
      n.c12 = p[12 * stride];
      n.c13 = p[13 * stride];
      n.c14 = p[14 * stride];
      n.c15 = p[15 * stride];
      return n;
    }

    __host__ __device__ __forceinline__ void store(u32 *p, u32 stride = 1)
    {
      p[0] = c0;
      p[stride] = c1;
      p[2 * stride] = c2;
      p[3 * stride] = c3;
      p[4 * stride] = c4;
      p[5 * stride] = c5;
      p[6 * stride] = c6;
      p[7 * stride] = c7;
      p[8 * stride] = c8;
      p[9 * stride] = c9;
      p[10 * stride] = c10;
      p[11 * stride] = c11;
      p[12 * stride] = c12;
      p[13 * stride] = c13;
      p[14 * stride] = c14;
      p[15 * stride] = c15;
    }
  };

  // A bit number.
  struct Number
  {
    // Little endian
    u32 c0, c1, c2, c3, c4, c5, c6, c7;

    __host__ __device__ Number() {}
    __host__ __device__ __forceinline__ Number(
        u32 c0, u32 c1, u32 c2, u32 c3, u32 c4, u32 c5, u32 c6, u32 c7) : c0(c0), c1(c1), c2(c2), c3(c3), c4(c4), c5(c5), c6(c6), c7(c7) {}

    static __host__ __device__ __forceinline__ Number zero()
    {
      Number n(0, 0, 0, 0, 0, 0, 0, 0);
      return n;
    }

    // Load/Store a number from memory, where words are stored non-contiguously
    static __host__ __device__ __forceinline__ Number load(const u32 *p, u32 stride = 1)
    {
      Number n(
          p[0],
          p[stride],
          p[2 * stride],
          p[3 * stride],
          p[4 * stride],
          p[5 * stride],
          p[6 * stride],
          p[7 * stride]);
      return n;
    }

    __host__ __device__ __forceinline__ void store(u32 *p, u32 stride = 1)
    {
      p[0] = c0;
      p[stride] = c1;
      p[2 * stride] = c2;
      p[3 * stride] = c3;
      p[4 * stride] = c4;
      p[5 * stride] = c5;
      p[6 * stride] = c6;
      p[7 * stride] = c7;
    }

    // Big number addition. NOT ON Fp.
    __device__ __forceinline__ Number operator+(const Number &rhs) const &
    {
      Number n;
      asm volatile(
          "add.cc.u32 %0, %8, %16;"
          "addc.cc.u32 %1, %9, %17;"
          "addc.cc.u32 %2, %10, %18;"
          "addc.cc.u32 %3, %11, %19;"
          "addc.cc.u32 %4, %12, %20;"
          "addc.cc.u32 %5, %13, %21;"
          "addc.cc.u32 %6, %14, %22;"
          "addc.cc.u32 %7, %15, %23;"
          : "=r"(n.c0), "=r"(n.c1), "=r"(n.c2), "=r"(n.c3), "=r"(n.c4), "=r"(n.c5), "=r"(n.c6), "=r"(n.c7)
          : "r"(c0), "r"(c1), "r"(c2), "r"(c3), "r"(c4), "r"(c5), "r"(c6), "r"(c7),
            "r"(rhs.c0), "r"(rhs.c1), "r"(rhs.c2), "r"(rhs.c3), "r"(rhs.c4), "r"(rhs.c5), "r"(rhs.c6), "r"(rhs.c7));
      return n;
    }

    // Big number addition, but on host. NOT optimized for speed.
    __host__ Number host_add(const Number &rhs) const &
    {
      using namespace host_arith;
      u32 carry = 0;
      auto d0 = addc(c0, rhs.c0, carry);
      auto d1 = addc(c1, rhs.c1, carry);
      auto d2 = addc(c2, rhs.c2, carry);
      auto d3 = addc(c3, rhs.c3, carry);
      auto d4 = addc(c4, rhs.c4, carry);
      auto d5 = addc(c5, rhs.c5, carry);
      auto d6 = addc(c6, rhs.c6, carry);
      auto d7 = addc(c7, rhs.c7, carry);
      Number r(d0, d1, d2, d3, d4, d5, d6, d7);
      return r;
    }

    // Big number subtraction.
    __device__ __forceinline__ Number operator-(const Number &rhs) const &
    {
      Number n;
      asm volatile(
          "sub.cc.u32 %0, %8, %16;"
          "subc.cc.u32 %1, %9, %17;"
          "subc.cc.u32 %2, %10, %18;"
          "subc.cc.u32 %3, %11, %19;"
          "subc.cc.u32 %4, %12, %20;"
          "subc.cc.u32 %5, %13, %21;"
          "subc.cc.u32 %6, %14, %22;"
          "subc.cc.u32 %7, %15, %23;"
          : "=r"(n.c0), "=r"(n.c1), "=r"(n.c2), "=r"(n.c3), "=r"(n.c4), "=r"(n.c5), "=r"(n.c6), "=r"(n.c7)
          : "r"(c0), "r"(c1), "r"(c2), "r"(c3), "r"(c4), "r"(c5), "r"(c6), "r"(c7),
            "r"(rhs.c0), "r"(rhs.c1), "r"(rhs.c2), "r"(rhs.c3), "r"(rhs.c4), "r"(rhs.c5), "r"(rhs.c6), "r"(rhs.c7));
      return n;
    }

    // Big number subtraction.
    // If a borrow occurred, `borrow` would be U32::MAX
    __device__ __forceinline__ Number sub_borrowed(const Number &rhs, u32 &borrow) const &
    {
      Number r = *this - rhs;
      asm volatile(
          "subc.u32 %0, %1, %2;"
          : "=r"(borrow)
          : "r"(0), "r"(0));
      return r;
    }

    // Big number subtraction with borrow, but on host. NOT optimized for speed.
    __host__ Number host_sub_borrowed(const Number &rhs, u32 &borrow_ret) const &
    {
      using namespace host_arith;
      u32 borrow = 0;
      auto d0 = subb(c0, rhs.c0, borrow);
      auto d1 = subb(c1, rhs.c1, borrow);
      auto d2 = subb(c2, rhs.c2, borrow);
      auto d3 = subb(c3, rhs.c3, borrow);
      auto d4 = subb(c4, rhs.c4, borrow);
      auto d5 = subb(c5, rhs.c5, borrow);
      auto d6 = subb(c6, rhs.c6, borrow);
      auto d7 = subb(c7, rhs.c7, borrow);
      borrow_ret = borrow;
      Number r(d0, d1, d2, d3, d4, d5, d6, d7);
      return r;
    }

    // Big number subtraction, but on host. NOT optimized for speed.
    __host__ Number host_sub(const Number &rhs) const &
    {
      u32 useless;
      return host_sub_borrowed(rhs, useless);
    }

    // Big number multiplication.
    __device__ __forceinline__ Number2 operator*(const Number &rhs) const &
    {
      Number2 r;
      // >>> GENERATED: mul
      // >>> GENERATED END
      return r;
    }

    // Big number square. Uses less registers and do less MACs then simply self-multiplying
    __device__ __forceinline__ Number2 square() const &
    {
      Number2 r;
      // >>> GENERATED: square
      // >>> GENERATED END
      return r;
    }

    // Big number multiplication, but on host.
    __host__ Number2 host_mul(const Number &rhs) const &
    {
      using namespace host_arith;
      // >>> GENERATED: host_mul
      // >>> GENERATED END
    }

    __host__ Number2 host_square() const &
    {
      using namespace host_arith;
      // >>> GENERATED: host_square
      // >>> GENERATED END
    }

    __device__ __host__ __forceinline__ Number slr(u32 k) const &
    {
      Number r;
      // >>> GENERATED: slr
      // >>> GENERATED END
      return r;
    }

    // Word-by-word equality.
    __host__ __device__ __forceinline__ bool operator==(const Number &rhs) const &
    {
      bool eq = true;
      eq = eq && c0 == rhs.c0;
      eq = eq && c1 == rhs.c1;
      eq = eq && c2 == rhs.c2;
      eq = eq && c3 == rhs.c3;
      eq = eq && c4 == rhs.c4;
      eq = eq && c5 == rhs.c5;
      eq = eq && c6 == rhs.c6;
      eq = eq && c7 == rhs.c7;
      return eq;
    }

    __host__ __device__ __forceinline__ bool operator!=(const Number &rhs) const &
    {
      bool eq = false;
      eq = eq || c0 != rhs.c0;
      eq = eq || c1 != rhs.c1;
      eq = eq || c2 != rhs.c2;
      eq = eq || c3 != rhs.c3;
      eq = eq || c4 != rhs.c4;
      eq = eq || c5 != rhs.c5;
      eq = eq || c6 != rhs.c6;
      eq = eq || c7 != rhs.c7;
      return eq;
    }

    // 1 for true, 0 for false
    __host__ __device__ __forceinline__ u32 is_zero() const &
    {
      return (c0 | c1 | c2 | c3 | c4 | c5 | c6 | c7) == 0;
    }
  };

  __host__ __device__ __forceinline__ void Number2::split(Number &hi, Number &lo) const
  {
    hi.c0 = c8;
    hi.c1 = c9;
    hi.c2 = c10;
    hi.c3 = c11;
    hi.c4 = c12;
    hi.c5 = c13;
    hi.c6 = c14;
    hi.c7 = c15;
    lo.c0 = c0;
    lo.c1 = c1;
    lo.c2 = c2;
    lo.c3 = c3;
    lo.c4 = c4;
    lo.c5 = c5;
    lo.c6 = c6;
    lo.c7 = c7;
  }

  // A field element.
  // For the number n, its corresponding field element is n R mod m.
  struct Element
  {
    Number n;
    // Inheritted methods
    __host__ __device__ Element() {}

    static __host__ __device__ __forceinline__ Element load(const u32 *p, u32 stride = 1)
    {
      Element elem;
      elem.n = Number::load(p, stride);
      return elem;
    }
    __host__ __device__ __forceinline__ void store(u32 *p, u32 stride = 1)
    {
      n.store(p, stride);
    }
    __host__ __device__ __forceinline__ bool operator==(const Element &rhs) const &
    {
      return n == rhs.n;
    }
    __host__ __device__ __forceinline__ bool operator!=(const Element &rhs) const &
    {
      return n != rhs.n;
    }
  };

  struct Params
  {
    u32 m[8], r_mod[8], r2_mod[8];
    u32 m_prime;
  };

  struct Env
  {
    Number m;
    // m' = -m^(-1) mod b where b = 2^32
    u32 m_prime;
    // r_mod = R mod m,
    // r2_mod = R^2 mod m
    Number r_mod, r2_mod;
    // m_sub2 = m - 2, for invertion field elements
    Number m_sub2;

    __device__ __host__ Env() {}

    __device__ __forceinline__ Env(const Params &p)
    {
      m = Number::load(p.m, 1);
      r_mod = Number::load(p.r_mod, 1);
      r2_mod = Number::load(p.r2_mod, 1);
      m_prime = p.m_prime;
      Number two(2, 0, 0, 0, 0, 0, 0, 0);
      m_sub2 = m - two;
    }

    static __host__ Env host_new(const Params &p)
    {
      Env env;
      env.m = Number::load(p.m, 1);
      env.r_mod = Number::load(p.r_mod, 1);
      env.r2_mod = Number::load(p.r2_mod, 1);
      env.m_prime = p.m_prime;
      Number two(2, 0, 0, 0, 0, 0, 0, 0);
      env.m_sub2 = env.m.host_sub(two);
      return env;
    }

    // One in Fp
    __device__ __host__ __forceinline__ Element one() const &
    {
      Element elem;
      elem.n = r_mod;
      return elem;
    }

    __device__ __host__ __forceinline__ Element zero() const &
    {
      Element elem;
      elem.n = Number::zero();
      return elem;
    }

    // Equality on Fp
    __device__ __host__ __forceinline__ bool is_zero(const Element &e) const &
    {
      return e.n.is_zero();
    }

    __device__ __host__ __forceinline__ bool eq(const Element &a, const Element &b) const &
    {
      return a.n == b.n;
    }

    __device__ __host__ __forceinline__ bool ne(const Element &a, const Element &b) const &
    {
      return a.n != b.n;
    }

    // Addition/Subtraction modulo m
    __device__ __forceinline__ Number add_modulo(const Number &a, const Number &b)
    {
      auto r = a + b;
      // If r > m , then r - m  > 0 and is the desired result;
      // Otherwise, sub(r, m ) "wrapps-over" r in Fp.
      r = sub_modulo(r, m);
      return r;
    }

    __device__ __forceinline__ Number sub_modulo(const Number &a, const Number &b)
    {
      u32 borrow;
      auto r = a.sub_borrowed(b, borrow);
      if (borrow)
        r = r + m;
      return r;
    }

    __host__ Number host_add_modulo(const Number &a, const Number &b)
    {
      auto r = a.host_add(b);
      r = host_sub_modulo(r, m);
      return r;
    }

    __host__ Number host_sub_modulo(const Number &a, const Number &b)
    {
      u32 borrow;
      auto r = a.host_sub_borrowed(b, borrow);
      // TODO: Better to use mask on host to avoid branch prediction miss
      if (borrow)
        r = r.host_add(m);
      return r;
    }

    // Negation modulo m
    __device__ __forceinline__ Number neg_modulo(const Number &a)
    {
      if (a.is_zero()) return Number::zero();
      Number r = m - a;
      return r;
    }

    __host__ Number host_neg_modulo(const Number &a)
    {
      if (a.is_zero()) return Number::zero();
      Number r = m.host_sub(a);
      return r;
    }

    // Addition/Subtraction in Fp
    __device__ __forceinline__ Element add(const Element &a, const Element &b)
    {
      Element r;
      r.n = add_modulo(a.n, b.n);
      return r;
    }
    __device__ __forceinline__ Element sub(const Element &a, const Element &b)
    {
      Element r;
      r.n = sub_modulo(a.n, b.n);
      return r;
    }

    __host__ Element host_add(const Element &a, const Element &b)
    {
      Element r;
      r.n = host_add_modulo(a.n, b.n);
      return r;
    }
    __host__ Element host_sub(const Element &a, const Element &b)
    {
      Element r;
      r.n = host_sub_modulo(a.n, b.n);
      return r;
    }

    // Negation in Fp
    __device__ __forceinline__ Element neg(const Element &a)
    {
      Element r;
      r.n = neg_modulo(a.n);
      return r;
    }

    __host__ Element host_neg(const Element &a)
    {
      Element r;
      r.n = host_neg_modulo(a.n);
      return r;
    }

    // For input A = (a15 ... a0)_b, calculates A R^(-1) mod m  where R = 2^256
    __device__ __forceinline__ Number montgomery_reduction(Number2 &a)
    {
      // >>> GENERATED: montgomery_reduction
      // >>> GENERATED END
      Number r, useless;
      a.split(r, useless);
      r = sub_modulo(r, m);
      return r;
    }

    __host__ Number host_montgomery_reduction(Number2 &a)
    {
      using namespace host_arith;
      // >>> GENERATED: host_montgomery_reduction
      // >>> GENERATED END
      Number r, useless_lo;
      a.split(r, useless_lo);
      r = host_sub_modulo(r, m);
      return r;
    }

    // Multiplication on Fp;
    // Essentially calculates a b R^(-1) mod m
    __device__ __forceinline__ Element mul(const Element &a, const Element &b)
    {
      Number2 prod = a.n * b.n;
      Element r;
      r.n = montgomery_reduction(prod);
      return r;
    }

    __host__ Element host_mul(const Element &a, const Element &b)
    {
      Number2 prod = a.n.host_mul(b.n);
      Element r;
      r.n = host_montgomery_reduction(prod);
      return r;
    }

    // Square on Fp
    __device__ __forceinline__ Element square(const Element &a)
    {
      Number2 prod = a.n.square();
      Element r;
      r.n = montgomery_reduction(prod);
      return r;
    }

    __host__ Element host_square(const Element &a)
    {
      Number2 prod = a.n.host_square();
      Element r;
      r.n = host_montgomery_reduction(prod);
      return r;
    }

    __device__ __forceinline__ void pow_iter(const Element &a, bool &found_one, Element &res, u32 p)
    {
      for (int i = 31; i >= 0; i--)
      {
        if (found_one)
          res = square(res);
        if ((p >> i) & 1)
        {
          found_one = true;
          res = mul(res, a);
        }
      }
    }

    // Power on Fp
    __device__ __forceinline__ Element pow(const Element &a, const Number &p)
    {
      auto res = one();
      bool found_one = false;
      pow_iter(a, found_one, res, p.c7);
      pow_iter(a, found_one, res, p.c6);
      pow_iter(a, found_one, res, p.c5);
      pow_iter(a, found_one, res, p.c4);
      pow_iter(a, found_one, res, p.c3);
      pow_iter(a, found_one, res, p.c2);
      pow_iter(a, found_one, res, p.c1);
      pow_iter(a, found_one, res, p.c0);
      return res;
    }

    __device__ __forceinline__ Element pow(const Element &a, u32 p)
    {
      auto res = one();
      bool found_one = false;
      pow_iter(a, found_one, res, p);
      return res;
    }

    __host__ Element host_pow(const Element &a, const Number &p)
    {
      auto res = one();
      bool found_one = false;
      auto iter = [this, a](bool &found_one, Element &res, u32 p)
      {
        for (int i = 31; i >= 0; i--)
        {
          if (found_one)
            res = host_square(res);
          if ((p >> i) & 1)
          {
            found_one = true;
            res = host_mul(res, a);
          }
        }   
      };
      iter(found_one, res, p.c7);
      iter(found_one, res, p.c6);
      iter(found_one, res, p.c5);
      iter(found_one, res, p.c4);
      iter(found_one, res, p.c3);
      iter(found_one, res, p.c2);
      iter(found_one, res, p.c1);
      iter(found_one, res, p.c0);
      return res;
    }

    // Inversion on Fp
    __device__ __forceinline__ Element invert(const Element &a)
    {
      return pow(a, m_sub2);
    }

    __host__ Element host_invert(const Element &a)
    {
      return host_pow(a, m_sub2);
    }

    // Convert a big number to the corresponding element on field;
    __device__ __forceinline__ Element from_number(const Number &n)
    {
      Number2 prod = n * r2_mod;
      Element r;
      r.n = montgomery_reduction(prod);
      return r;
    }

    __host__ Element host_from_number(const Number &n)
    {
      Number2 prod = n.host_mul(r2_mod);
      Element r;
      r.n = host_montgomery_reduction(prod);
      return r;
    }

    // Convert an element on field to the corresponding big number
    __device__ __forceinline__ Number to_number(const Element &elem)
    {
      Number2 n(elem.n.c0, elem.n.c1, elem.n.c2, elem.n.c3, elem.n.c4, elem.n.c5, elem.n.c6, elem.n.c7, 0, 0, 0, 0, 0, 0, 0, 0);
      return montgomery_reduction(n);
    }

    __host__ Number host_to_number(const Element &elem)
    {
      Number2 n(elem.n.c0, elem.n.c1, elem.n.c2, elem.n.c3, elem.n.c4, elem.n.c5, elem.n.c6, elem.n.c7, 0, 0, 0, 0, 0, 0, 0, 0);
      return host_montgomery_reduction(n);
    }
  };

  std::ostream &
  operator<<(std::ostream &os, const Number &n)
  {
    os << "0x";
    os << std::hex
       << std::setfill('0') << std::setw(8) << n.c7 << '_'
       << std::setfill('0') << std::setw(8) << n.c6 << '_'
       << std::setfill('0') << std::setw(8) << n.c5 << '_'
       << std::setfill('0') << std::setw(8) << n.c4 << '_'
       << std::setfill('0') << std::setw(8) << n.c3 << '_'
       << std::setfill('0') << std::setw(8) << n.c2 << '_'
       << std::setfill('0') << std::setw(8) << n.c1 << '_'
       << std::setfill('0') << std::setw(8) << n.c0;
    return os;
  }

  std::ostream &
  operator<<(std::ostream &os, const Element &e)
  {
    os << e.n;
    return os;
  }

}
#endif